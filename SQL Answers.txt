
-- Basic:
-- 1 Retrieve the total number of orders placed.
SELECT COUNT(*) AS total_orders
FROM orders;


-- 2 Calculate the total revenue generated from pizza sales.
SELECT SUM(od.quantity * p.price) AS total_revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id;


-- 3 Identify the highest-priced pizza.
SELECT pizza_id, MAX(price) AS highest_price
FROM pizzas;

-- 4 Identify the most common pizza size ordered.
SELECT p.size, COUNT(*) AS size_count
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY p.size
ORDER BY size_count DESC
LIMIT 1;

-- 5 List the top 5 most ordered pizza types along with their quantities.
SELECT od.pizza_id, SUM(od.quantity) AS total_quantity
FROM order_details od
GROUP BY od.pizza_id
ORDER BY total_quantity DESC
LIMIT 5;


Intermediate:
-- 6 Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT od.pizza_id, SUM(od.quantity) AS total_quantity
FROM order_details od
GROUP BY od.pizza_id
ORDER BY total_quantity DESC
LIMIT 5;

-- 7 Determine the distribution of orders by hour of the day.
SELECT EXTRACT(HOUR FROM time) AS order_hour, COUNT(*) AS order_count
FROM orders
GROUP BY order_hour
ORDER BY order_hour;

-- 8 Join relevant tables to find the category-wise distribution of pizzas.
SELECT pt.category, COUNT(*) AS category_count
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.category;

-- 9 Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT date, AVG(order_count) AS average_pizzas_per_day
FROM (
    SELECT o.date, COUNT(*) AS order_count
    FROM orders o
    JOIN order_details od ON o.order_id = od.order_id
    GROUP BY o.date
) subquery
GROUP BY date;

-- 10 Determine the top 3 most ordered pizza types based on revenue.
SELECT od.pizza_id, SUM(od.quantity * p.price) AS total_revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY od.pizza_id
ORDER BY total_revenue DESC
LIMIT 3;


Advanced:
-- 11 Calculate the percentage contribution of each pizza type to total revenue.
WITH total_revenue AS (
    SELECT SUM(od.quantity * p.price) AS total
    FROM order_details od
    JOIN pizzas p ON od.pizza_id = p.pizza_id
)
SELECT od.pizza_id, (SUM(od.quantity * p.price) / tr.total) * 100 AS percentage_contribution
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN total_revenue tr
GROUP BY od.pizza_id, tr.total;

-- 12 Analyze the cumulative revenue generated over time.
SELECT o.date, SUM(od.quantity * p.price) AS daily_revenue, 
       SUM(SUM(od.quantity * p.price)) OVER (ORDER BY o.date) AS cumulative_revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN orders o ON od.order_id = o.order_id
GROUP BY o.date
ORDER BY o.date;

-- 13 Determine the top 3 most ordered pizza types based on revenue for each pizza category.
SELECT o.date, SUM(od.quantity * p.price) AS daily_revenue, 
       SUM(SUM(od.quantity * p.price)) OVER (ORDER BY o.date) AS cumulative_revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN orders o ON od.order_id = o.order_id
GROUP BY o.date
ORDER BY o.date;

